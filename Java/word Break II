
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]






class Solution 
{
    public List<String> wordBreak(String s, List<String> wordDict) 
    {
        
        return dfs(s, wordDict, new HashMap<String, List<String>>()); // @copyright
        
    }
    
    public List<String> dfs(String s, List<String> wordDict, HashMap<String, List<String>> map)
    {
        if(map.containsKey(s))
        {
            return map.get(s);
        }
        
        List<String> res = new LinkedList<String>();
        if(s.length()==0)
        {
            res.add("");
            return res;
        }
        for(String word:wordDict)
        {
            if(s.startsWith(word))
            {
                List<String> sublist = dfs(s.substring(word.length()), wordDict, map);
                for(String sub:sublist)
                {
                    if(sub.equals(""))
                    {
                        res.add(word+""+sub);
                    }
                    else
                    {
                        res.add(word+" "+sub);    
                    }
                     //(sub.isEmpty())?"":" "
                }
                
            }
        }
        map.put(s, res);
        return res;
    }
}
